
-----------------
a boa pratica de formatação do C# diz para usar a chave em baixo da palavra, exemplo:
class Pessoa
{

}

--------------------

-------------------------------------



---------------------------------------



------------------------------------------


-------------------------------------------



---------------------------------------------



------------------------------------------------



---------------------------------------



-------------------------------------------------------

----------------------------------------------------

**Atributos e Métodos ESTATICOS**

São atributos e metodos que podem ser acessados sem precisar instanciar um objeto, exemplo:

No arquivo de classe Exemplo vai ta assim:
public static string nome = "Nayala";
public static void soma(int n1, int n2){}

ai no arquivo Main da pra chamar eles só de fazer assim:
Exemplo.soma(3, 7);
Console.WriteLine("Olá "+Exemplo.nome);

--------------------------------------------------------

**Abstração**

- É uma classe que pode conter métodos obrigatórios para todas as classes que a herdarem.

- É possível criar métodos convencionais (não obrigatórios), para que as classes que herdem consigam utilizar.

- Não é possiível instanciar uma classe abstrata, exemplo: Produto prod = new Produto();

- Padrão utilizado em projetos com muitos desenvolvedores, pois gatante uma estrutura pré-moldada com ações que podem ser realizadas.

- Como é utilizada a herança, cada classe pode herdar apenas uma classe abstrata:

class Produto : PadraoProduto > Ok
class Produtop : PadraoProduto, CalculoImpostos > Falha

Exemplo:

para usar precisa que a classe que vai ser o padrão esteja com abstract, e o metodo que for obrigatorio tambem:

    abstract class Padrao
    {

        // Método Obrigatório
        public abstract void taxaEmprestimo(double valor);

        // Opcional

        public void calculoPoupanca(double valor, double taxa)
        {
            Console.WriteLine("Ganhos obtidos pela pupança R$"+(valor * taxa));
        }


    }
	
Note que o metodo obrigatorio não abre chave, pois ele é obrigatorio a ser feito nas classes que herdarem a classe padrão.

E nas classes que forem herdar o padrão vai estar assim:

    class PessoaFisica : Padrao
    {

        // Método obrigatório
        public override void taxaEmprestimo(double valor)
        {
            Console.WriteLine("Taxa de empréstimo para Pessoa Física R$" + (valor * 0.1));
        }

    }
	
Note que é necessario botar o override.
Se nao fizer o metodo obrigatorio dá erro no programa, pois é OBRIGATORIO FAZE-LA.

Por fim, na Main vc instancia o objeto classe PessoaFisica por exemplo, da mesma forma que uma normal:
PessoaFisica pf = new PessoaFisica();

a classe opcional pode ser puxada como uma herança pelo objeto pf não precisa ser refeita nem nada se nao for necessario.

-----------------------------------------

**Interface** (*não é interface gráfica*)

- Utilizada para criar exclusivamente métodos obrigatórios (a abstrata tem opção de criar metodos opcionais, essa não, todos são obrigatorios);

- Uma classe pode implementar várias Interfaces (enquanto vc só pode herdar 1 classe abstrata numa classe, a interface vc pode "implementar" varias (e é usado o termo implementar ao inves de herdar));

- Os métodos da Interface não contêm cálculos, condicionais, laços, e demais ações (igual as obrigatorias da abstrata q **não abrem chave**;
double calculo(double numero);
string texto();
void mensagem(string nome, int idade);


- No C# por padrão um método criado na Interface é abstrato e público (direferente da classe abstrata a interface é SEMPRE abstract e public, portanto vc não precisa definir no inicio do metodo as palavras public abstract);

- Nas boas práticas do C#, **toda interface tem a inicial I**, em seguida o nome da interface:
IPadrao
ICalculo
IConsulta
IAcoes

exemplo:
Na classe de interface fica assim:

    interface IPadrao
    {

        void somar(int n1, int n2);

        void subtrair(int n1, int n2);


    }
	
de resto é similar a Abstração.

---------------------------------------------------

